use futuresdr::anyhow::Result;
use futuresdr::macros::async_trait;
use futuresdr::num_complex::Complex32;
use futuresdr::runtime::Block;
use futuresdr::runtime::BlockMeta;
use futuresdr::runtime::BlockMetaBuilder;
use futuresdr::runtime::ItemTag;
use futuresdr::runtime::Kernel;
use futuresdr::runtime::MessageIo;
use futuresdr::runtime::MessageIoBuilder;
use futuresdr::runtime::StreamIo;
use futuresdr::runtime::StreamIoBuilder;
use futuresdr::runtime::Tag;
use futuresdr::runtime::WorkIo;

pub struct Zc {
    pad_front: usize,
    pad_tail: usize,
}

impl Zc {
    pub fn new(pad_front: usize, pad_tail: usize) -> Block {
        Block::new(
            BlockMetaBuilder::new("zc").build(),
            StreamIoBuilder::new()
                .add_input::<Complex32>("in")
                .add_output::<Complex32>("out")
                .build(),
            MessageIoBuilder::new().build(),
            Zc {
                pad_front,
                pad_tail,
            },
        )
    }
}

#[async_trait]
impl Kernel for Zc {
    async fn work(
        &mut self,
        io: &mut WorkIo,
        sio: &mut StreamIo,
        _m: &mut MessageIo<Self>,
        _b: &mut BlockMeta,
    ) -> Result<()> {
        let input = sio.input(0).slice::<Complex32>();
        let output = sio.output(0).slice::<Complex32>();

        let tags = sio.input(0).tags().clone();
        if let Some((index, len)) = tags.iter().find_map(|x| match x {
            ItemTag {
                index,
                tag: Tag::NamedUsize(n, len),
            } => {
                if n == "wifi_start" {
                    Some((index, len))
                } else {
                    None
                }
            }
            _ => None,
        }) {
            assert_eq!(*index, 0);
            // wait till enough room in output buffer + input buffer filled
            if output.len() >= self.pad_front + std::cmp::max(self.pad_tail, 1) + len * 80 + 320
                && input.len() >= len * 64
            {
                // pad the beginning with null
                output[0..self.pad_front].fill(Complex32::new(0.0, 0.0));
                // add prefix
                output[self.pad_front..self.pad_front + 320].copy_from_slice(&SYNC_WORDS);

                // copying data into output buffer with new offset
                for k in 0..*len {
                    let in_offset = k * 64;
                    let out_offset = self.pad_front + 320 + k * 80;
                    // why are we copying the same data twice?
                    output[out_offset..out_offset + 16]
                        .copy_from_slice(&input[in_offset + 48..in_offset + 64]);
                    output[out_offset + 16..out_offset + 80]
                        .copy_from_slice(&input[in_offset..in_offset + 64]);
                }

                // windowing

                // why are we doing this???
                let out_offset = self.pad_front + 320;
                // doing some interpolation?
                output[out_offset] = 0.5 * (output[out_offset] + SYNC_WORDS[320 - 64]);
                for k in 0..*len {
                    output[out_offset + (k + 1) * 80] = 0.5
                        * (output[out_offset + (k + 1) * 80] + output[out_offset + k * 80 + 16]);
                }

                // adding some zero padding at the end of the frame
                let out_offset = self.pad_front + 320 + len * 80;
                output[out_offset + 1..out_offset + std::cmp::max(self.pad_tail, 1)]
                    .fill(Complex32::new(0.0, 0.0));

                // removing the data we just copied from our buffer
                sio.input(0).consume(len * 64);
                let produce = self.pad_front + std::cmp::max(self.pad_tail, 1) + len * 80 + 320;

                // scaling our data down, why?
                output[0..produce].iter_mut().for_each(|v| *v *= 0.6);

                // adding tags to show where the frame starts and how long it is
                sio.output(0)
                    .add_tag(0, Tag::NamedUsize("burst_start".to_string(), produce));
                // writing our data into the outputbuffer
                sio.output(0).produce(produce);

                if sio.input(0).finished() && input.len() < len * 64 {
                    io.finished = true;
                }
            }
        } else if sio.input(0).finished() {
            io.finished = true;
        }

        Ok(())
    }
}

const SYNC_WORDS: [Complex32; 320] = [
    Complex32::new(1.0, 0.0),
    Complex32::new(0.9995663085020212, -0.02944817324796316),
    Complex32::new(0.9930684569549263, -0.11753739745783764),
    Complex32::new(0.9650736723115474, -0.26197863846333747),
    Complex32::new(0.8910065241883679, -0.45399049973954675),
    Complex32::new(0.7409511253549591, -0.6715589548470184),
    Complex32::new(0.48862124149695496, -0.8724960070727971),
    Complex32::new(0.1272810033739131, -0.991866697787626),
    Complex32::new(-0.30901699437494734, -0.9510565162951536),
    Complex32::new(-0.7276231179845749, -0.6859771119901927),
    Complex32::new(-0.9807852804032304, -0.19509032201612816),
    Complex32::new(-0.9122095257974675, 0.4097240303476957),
    Complex32::new(-0.45399049973954697, 0.8910065241883678),
    Complex32::new(0.26197863846333747, 0.9650736723115474),
    Complex32::new(0.8724960070727973, 0.4886212414969546),
    Complex32::new(0.9415440651830207, -0.3368898533922204),
    Complex32::new(0.30901699437494773, -0.9510565162951535),
    Complex32::new(-0.6113544074368167, -0.79135692864066),
    Complex32::new(-0.9930684569549263, 0.11753739745783794),
    Complex32::new(-0.35531090128041637, 0.9347481818282923),
    Complex32::new(0.7071067811865478, 0.7071067811865472),
    Complex32::new(0.9122095257974667, -0.40972403034769744),
    Complex32::new(-0.11753739745783952, -0.9930684569549261),
    Complex32::new(-0.9918666977876262, -0.12728100337391232),
    Complex32::new(-0.30901699437494806, 0.9510565162951534),
    Complex32::new(0.9039892931234429, 0.427555093430283),
    Complex32::new(0.48862124149695507, -0.8724960070727971),
    Complex32::new(-0.8676570098195433, -0.4971632662526557),
    Complex32::new(-0.4539904997395452, 0.8910065241883687),
    Complex32::new(0.9347481818282921, 0.35531090128041687),
    Complex32::new(0.1950903220161269, -0.9807852804032308),
    Complex32::new(-0.9995663085020213, 0.029448173247960896),
    Complex32::new(0.3090169943749463, 0.951056516295154),
    Complex32::new(0.7913569286406595, -0.6113544074368173),
    Complex32::new(-0.8724960070727976, -0.48862124149695396),
    Complex32::new(-0.04906767432741216, 0.9987954562051726),
    Complex32::new(0.8910065241883673, -0.45399049973954786),
    Complex32::new(-0.8676570098195446, -0.4971632662526533),
    Complex32::new(0.11753739745783666, 0.9930684569549264),
    Complex32::new(0.6859771119901916, -0.7276231179845759),
    Complex32::new(-1.0, 1.7157434800794711e-15),
    Complex32::new(0.7276231179845746, 0.6859771119901931),
    Complex32::new(-0.11753739745784687, -0.9930684569549252),
    Complex32::new(-0.4971632662526522, 0.8676570098195452),
    Complex32::new(0.8910065241883645, -0.4539904997395535),
    Complex32::new(-0.9987954562051725, -0.04906767432741485),
    Complex32::new(0.8724960070727988, 0.48862124149695185),
    Complex32::new(-0.6113544074368066, -0.7913569286406679),
    Complex32::new(0.3090169943749449, 0.9510565162951544),
    Complex32::new(-0.029448173247968123, -0.9995663085020211),
    Complex32::new(-0.19509032201613216, 0.9807852804032297),
    Complex32::new(0.3553109012804171, -0.934748181828292),
    Complex32::new(-0.4539904997395472, 0.8910065241883677),
    Complex32::new(0.4971632662526563, -0.867657009819543),
    Complex32::new(-0.4886212414969604, 0.8724960070727941),
    Complex32::new(0.4275550934302807, -0.903989293123444),
    Complex32::new(-0.30901699437494073, 0.9510565162951558),
    Complex32::new(0.12728100337391718, -0.9918666977876255),
    Complex32::new(0.11753739745783447, 0.9930684569549266),
    Complex32::new(-0.409724030347691, -0.9122095257974696),
    Complex32::new(0.7071067811865515, 0.7071067811865435),
    Complex32::new(-0.9347481818282922, -0.35531090128041665),
    Complex32::new(0.9930684569549274, -0.11753739745782864),
    Complex32::new(-0.791356928640655, 0.6113544074368232),
    Complex32::new(0.3090169943749519, -0.9510565162951521),
    Complex32::new(0.336889853392201, 0.9415440651830276),
    Complex32::new(-0.8724960070727993, -0.48862124149695096),
    Complex32::new(0.9650736723115441, -0.2619786384633498),
    Complex32::new(-0.4539904997395428, 0.8910065241883699),
    Complex32::new(-0.4097240303476767, -0.912209525797476),
    Complex32::new(0.980785280403235, 0.19509032201610527),
    Complex32::new(-0.6859771119901765, 0.7276231179845902),
    Complex32::new(-0.3090169943749519, -0.9510565162951521),
    Complex32::new(0.9918666977876295, 0.12728100337388606),
    Complex32::new(-0.4886212414969506, 0.8724960070727996),
    Complex32::new(-0.6715589548470144, -0.7409511253549627),
    Complex32::new(0.8910065241883697, -0.45399049973954325),
    Complex32::new(0.2619786384633465, 0.965073672311545),
    Complex32::new(-0.9930684569549256, 0.11753739745784372),
    Complex32::new(-0.02944817324797792, -0.9995663085020209),
    Complex32::new(1.0, -6.8629739203178846e-15),
    Complex32::new(0.029448173247974, 0.999566308502021),
    Complex32::new(-0.9930684569549265, 0.11753739745783594),
    Complex32::new(-0.26197863846333513, -0.965073672311548),
    Complex32::new(0.891006524188351, -0.45399049973957994),
    Complex32::new(0.6715589548470209, 0.7409511253549568),
    Complex32::new(-0.48862124149694625, 0.872496007072802),
    Complex32::new(-0.9918666977876224, -0.1272810033739415),
    Complex32::new(-0.30901699437497615, -0.9510565162951442),
    Complex32::new(0.6859771119901815, -0.7276231179845855),
    Complex32::new(0.9807852804032329, 0.19509032201611584),
    Complex32::new(0.4097240303476892, 0.9122095257974704),
    Complex32::new(-0.4539904997395341, 0.8910065241883743),
    Complex32::new(-0.96507367231155, 0.2619786384633281),
    Complex32::new(-0.8724960070727725, -0.48862124149699887),
    Complex32::new(-0.33688985339222594, -0.9415440651830187),
    Complex32::new(0.3090169943749575, -0.9510565162951503),
    Complex32::new(0.7913569286406523, -0.6113544074368267),
    Complex32::new(0.993068456954924, -0.11753739745785735),
    Complex32::new(0.934748181828296, 0.35531090128040654),
    Complex32::new(0.7071067811865362, 0.7071067811865588),
    Complex32::new(0.40972403034769367, 0.9122095257974684),
    Complex32::new(0.1175373974578335, 0.9930684569549267),
    Complex32::new(-0.12728100337387976, 0.9918666977876304),
    Complex32::new(-0.3090169943749491, 0.951056516295153),
    Complex32::new(-0.42755509343022796, 0.903989293123469),
    Complex32::new(-0.4886212414969625, 0.8724960070727928),
    Complex32::new(-0.4971632662526371, 0.867657009819554),
    Complex32::new(-0.453990499739569, 0.8910065241883566),
    Complex32::new(-0.3553109012803905, 0.9347481818283021),
    Complex32::new(-0.1950903220161221, 0.9807852804032317),
    Complex32::new(0.029448173247988697, 0.9995663085020206),
    Complex32::new(0.30901699437497426, 0.9510565162951449),
    Complex32::new(0.6113544074368279, 0.7913569286406514),
    Complex32::new(0.8724960070727893, 0.48862124149696895),
    Complex32::new(0.9987954562051748, 0.04906767432736737),
    Complex32::new(0.8910065241883737, -0.4539904997395354),
    Complex32::new(0.49716326625263624, -0.8676570098195544),
    Complex32::new(-0.1175373974578189, -0.9930684569549285),
    Complex32::new(-0.7276231179845623, -0.6859771119902061),
    Complex32::new(-1.0, 2.2547118678316243e-14),
    Complex32::new(-0.6859771119902001, 0.727623117984568),
    Complex32::new(0.11753739745783545, 0.9930684569549265),
    Complex32::new(0.8676570098195668, 0.4971632662526146),
    Complex32::new(0.8910065241883843, -0.45399049973951444),
    Complex32::new(0.049067674327382536, -0.9987954562051742),
    Complex32::new(-0.8724960070728137, -0.4886212414969253),
    Complex32::new(-0.7913569286406853, 0.611354407436784),
    Complex32::new(0.3090169943749295, 0.9510565162951594),
    Complex32::new(0.99956630850202, -0.02944817324800682),
    Complex32::new(0.19509032201620763, -0.9807852804032147),
    Complex32::new(-0.9347481818283145, -0.355310901280358),
    Complex32::new(-0.4539904997395306, 0.8910065241883761),
    Complex32::new(0.8676570098194947, 0.49716326625274043),
    Complex32::new(0.48862124149691033, -0.872496007072822),
    Complex32::new(-0.9039892931234008, -0.4275550934303719),
    Complex32::new(-0.30901699437493046, 0.9510565162951591),
    Complex32::new(0.9918666977876339, 0.12728100337385204),
    Complex32::new(-0.11753739745775661, -0.9930684569549358),
    Complex32::new(-0.9122095257974502, 0.40972403034773436),
    Complex32::new(0.7071067811866139, 0.7071067811864812),
    Complex32::new(0.35531090128045556, -0.9347481818282773),
    Complex32::new(-0.9930684569549157, 0.11753739745792645),
    Complex32::new(0.6113544074368433, 0.7913569286406394),
    Complex32::new(0.3090169943749295, -0.9510565162951594),
    Complex32::new(-0.9415440651830059, 0.33688985339226146),
    Complex32::new(0.8724960070728506, 0.4886212414968595),
    Complex32::new(-0.2619786384633257, -0.9650736723115506),
    Complex32::new(-0.4539904997395288, 0.891006524188377),
    Complex32::new(0.9122095257974763, -0.40972403034767624),
    Complex32::new(-0.9807852804032262, -0.19509032201614945),
    Complex32::new(0.7276231179845872, 0.6859771119901797),
    Complex32::new(-0.30901699437493235, -0.9510565162951585),
    Complex32::new(-0.1272810033739225, 0.9918666977876248),
    Complex32::new(0.4886212414969223, -0.8724960070728154),
    Complex32::new(-0.7409511253550282, 0.6715589548469422),
    Complex32::new(0.8910065241883568, -0.45399049973956856),
    Complex32::new(-0.9650736723115269, 0.2619786384634132),
    Complex32::new(0.9930684569549194, -0.11753739745789628),
    Complex32::new(-0.9995663085020189, 0.029448173248043073),
    Complex32::new(1.0, -2.7451895681271538e-14),
    Complex32::new(-0.9995663085020208, 0.029448173247978417),
    Complex32::new(0.9930684569549212, -0.11753739745788071),
    Complex32::new(-0.9650736723115478, 0.26197863846333563),
    Complex32::new(0.891006524188371, -0.45399049973954064),
    Complex32::new(-0.74095112535494, 0.6715589548470394),
    Complex32::new(0.4886212414969634, -0.8724960070727924),
    Complex32::new(-0.12728100337392056, 0.9918666977876252),
    Complex32::new(-0.30901699437508895, -0.9510565162951076),
    Complex32::new(0.7276231179844997, 0.6859771119902724),
    Complex32::new(-0.9807852804032331, -0.19509032201611487),
    Complex32::new(0.9122095257974883, -0.4097240303476494),
    Complex32::new(-0.4539904997395114, 0.8910065241883859),
    Complex32::new(-0.2619786384633919, -0.9650736723115326),
    Complex32::new(0.8724960070727414, 0.48862124149705444),
    Complex32::new(-0.9415440651829882, 0.3368898533923113),
    Complex32::new(0.3090169943748326, -0.9510565162951908),
    Complex32::new(0.6113544074368729, 0.7913569286406167),
    Complex32::new(-0.993068456954919, 0.1175373974578992),
    Complex32::new(0.3553109012804354, -0.9347481818282851),
    Complex32::new(0.7071067811865833, 0.7071067811865117),
    Complex32::new(-0.9122095257974944, 0.40972403034763605),
    Complex32::new(-0.11753739745781112, -0.9930684569549294),
    Complex32::new(0.9918666977876182, 0.12728100337397452),
    Complex32::new(-0.30901699437489316, 0.9510565162951712),
    Complex32::new(-0.9039892931234386, -0.4275550934302922),
    Complex32::new(0.48862124149698904, -0.8724960070727781),
    Complex32::new(0.8676570098195873, 0.49716326625257884),
    Complex32::new(-0.45399049973972616, 0.8910065241882764),
    Complex32::new(-0.9347481818282943, -0.35531090128041115),
    Complex32::new(0.1950903220161038, -0.9807852804032353),
    Complex32::new(0.9995663085020188, -0.029448173248047976),
    Complex32::new(0.30901699437490715, 0.9510565162951666),
    Complex32::new(-0.7913569286406001, 0.6113544074368942),
    Complex32::new(-0.8724960070728223, -0.48862124149690994),
    Complex32::new(0.04906767432737274, -0.9987954562051746),
    Complex32::new(0.8910065241883318, -0.45399049973961747),
    Complex32::new(0.8676570098195073, 0.49716326625271834),
    Complex32::new(0.11753739745787828, 0.9930684569549215),
    Complex32::new(-0.6859771119902157, 0.7276231179845533),
    Complex32::new(-1.0, -6.368782336202825e-14),
    Complex32::new(-0.7276231179845367, -0.6859771119902331),
    Complex32::new(-0.1175373974578306, -0.9930684569549272),
    Complex32::new(0.49716326625278084, -0.8676570098194716),
    Complex32::new(0.8910065241883754, -0.4539904997395319),
    Complex32::new(0.9987954562051798, 0.049067674327265554),
    Complex32::new(0.872496007072863, 0.4886212414968372),
    Complex32::new(0.6113544074369411, 0.791356928640564),
    Complex32::new(0.30901699437494073, 0.9510565162951558),
    Complex32::new(0.029448173248059244, 0.9995663085020184),
    Complex32::new(-0.1950903220158933, 0.9807852804032772),
    Complex32::new(-0.35531090128044546, 0.9347481818282812),
    Complex32::new(-0.4539904997395777, 0.8910065241883521),
    Complex32::new(-0.49716326625265245, 0.8676570098195451),
    Complex32::new(-0.48862124149688557, 0.8724960070728359),
    Complex32::new(-0.4275550934301039, 0.9039892931235276),
    Complex32::new(-0.30901699437504226, 0.9510565162951228),
    Complex32::new(-0.1272810033738156, 0.9918666977876386),
    Complex32::new(0.11753739745794642, 0.9930684569549134),
    Complex32::new(0.4097240303478421, 0.9122095257974018),
    Complex32::new(0.7071067811865653, 0.7071067811865297),
    Complex32::new(0.9347481818282675, 0.35531090128048165),
    Complex32::new(0.9930684569549143, -0.11753739745793912),
    Complex32::new(0.7913569286406068, -0.6113544074368856),
    Complex32::new(0.30901699437484004, -0.9510565162951885),
    Complex32::new(-0.33688985339238836, -0.9415440651829605),
    Complex32::new(-0.8724960070728253, -0.4886212414969048),
    Complex32::new(-0.9650736723115535, 0.2619786384633148),
    Complex32::new(-0.4539904997396039, 0.8910065241883387),
    Complex32::new(0.4097240303476365, 0.9122095257974941),
    Complex32::new(0.9807852804032701, 0.19509032201592932),
    Complex32::new(0.6859771119903177, -0.7276231179844571),
    Complex32::new(-0.30901699437489877, -0.9510565162951694),
    Complex32::new(-0.991866697787611, -0.12728100337402992),
    Complex32::new(-0.48862124149688213, 0.8724960070728379),
    Complex32::new(0.6715589548470907, 0.7409511253548936),
    Complex32::new(0.8910065241884021, -0.4539904997394795),
    Complex32::new(-0.26197863846313657, -0.9650736723116019),
    Complex32::new(-0.993068456954935, 0.1175373974577649),
    Complex32::new(0.029448173247837852, 0.999566308502025),
    Complex32::new(1.0, -9.018847471326497e-14),
    Complex32::new(-0.029448173247854505, -0.9995663085020244),
    Complex32::new(-0.993068456954931, 0.117537397457798),
    Complex32::new(0.26197863846340425, 0.9650736723115293),
    Complex32::new(0.8910065241883719, -0.4539904997395389),
    Complex32::new(-0.6715589548469839, -0.7409511253549903),
    Complex32::new(-0.4886212414967949, 0.8724960070728868),
    Complex32::new(0.9918666977876259, 0.12728100337391424),
    Complex32::new(-0.30901699437480934, -0.9510565162951985),
    Complex32::new(-0.6859771119902086, 0.7276231179845599),
    Complex32::new(0.9807852804032582, 0.19509032201598892),
    Complex32::new(-0.40972403034759625, -0.9122095257975121),
    Complex32::new(-0.4539904997394258, 0.8910065241884295),
    Complex32::new(0.9650736723114968, -0.26197863846352387),
    Complex32::new(-0.872496007072717, -0.48862124149709807),
    Complex32::new(0.3368898533919814, 0.9415440651831062),
    Complex32::new(0.309016994375019, -0.9510565162951303),
    Complex32::new(-0.7913569286405726, 0.6113544074369299),
    Complex32::new(0.9930684569549058, -0.11753739745801114),
    Complex32::new(-0.9347481818282992, -0.3553109012803983),
    Complex32::new(0.7071067811863186, 0.7071067811867764),
    Complex32::new(-0.409724030347539, -0.9122095257975379),
    Complex32::new(0.11753739745808463, 0.9930684569548971),
    Complex32::new(0.12728100337388654, -0.9918666977876295),
    Complex32::new(-0.30901699437487823, 0.9510565162951761),
    Complex32::new(0.427555093430344, -0.903989293123414),
    Complex32::new(-0.48862124149730113, 0.8724960070726032),
    Complex32::new(0.49716326625265667, -0.8676570098195427),
    Complex32::new(-0.4539904997393647, 0.8910065241884607),
    Complex32::new(0.35531090128020637, -0.9347481818283722),
    Complex32::new(-0.19509032201651808, 0.9807852804031529),
    Complex32::new(-0.029448173247666423, -0.99956630850203),
    Complex32::new(0.3090169943750153, 0.9510565162951315),
    Complex32::new(-0.6113544074366565, -0.7913569286407839),
    Complex32::new(0.8724960070729176, 0.48862124149673974),
    Complex32::new(-0.9987954562051751, -0.049067674327364405),
    Complex32::new(0.891006524188516, -0.453990499739256),
    Complex32::new(-0.4971632662530351, 0.8676570098193259),
    Complex32::new(-0.11753739745800774, -0.9930684569549062),
    Complex32::new(0.7276231179846705, 0.6859771119900913),
    Complex32::new(-1.0, 3.7539395218553516e-13),
    Complex32::new(0.6859771119902149, -0.7276231179845539),
    Complex32::new(0.11753739745767001, 0.9930684569549462),
    Complex32::new(-0.8676570098195244, -0.49716326625268853),
    Complex32::new(0.8910065241882055, -0.4539904997398655),
    Complex32::new(-0.04906767432730518, 0.998795456205178),
    Complex32::new(-0.8724960070728636, -0.4886212414968364),
    Complex32::new(0.7913569286409555, -0.6113544074364343),
    Complex32::new(0.30901699437501906, 0.9510565162951303),
    Complex32::new(-0.9995663085020215, 0.02944817324795493),
    Complex32::new(0.19509032201595575, -0.9807852804032647),
    Complex32::new(0.9347481818283538, 0.35531090128025444),
    Complex32::new(-0.45399049973915684, 0.8910065241885665),
    Complex32::new(-0.8676570098195742, -0.4971632662526018),
    Complex32::new(0.48862124149699754, -0.8724960070727732),
    Complex32::new(0.9039892931234901, 0.42755509343018316),
    Complex32::new(-0.3090169943748708, 0.9510565162951785),
    Complex32::new(-0.9918666977876667, -0.12728100337359635),
    Complex32::new(-0.1175373974577547, -0.9930684569549361),
    Complex32::new(0.912209525797371, -0.4097240303479105),
    Complex32::new(0.7071067811864864, 0.7071067811866086),
    Complex32::new(-0.35531090128054804, 0.9347481818282423),
    Complex32::new(-0.9930684569549179, 0.11753739745790896),
    Complex32::new(-0.6113544074368938, -0.7913569286406005),
    Complex32::new(0.3090169943750078, -0.951056516295134),
    Complex32::new(0.9415440651830063, -0.3368898533922606),
    Complex32::new(0.8724960070727787, 0.4886212414969877),
    Complex32::new(0.2619786384634818, 0.9650736723115082),
    Complex32::new(-0.4539904997394135, 0.8910065241884357),
    Complex32::new(-0.9122095257976693, 0.40972403034724625),
    Complex32::new(-0.9807852804031502, -0.195090322016532),
    Complex32::new(-0.7276231179845314, -0.6859771119902389),
    Complex32::new(-0.3090169943750405, -0.9510565162951233),
    Complex32::new(0.1272810033738418, -0.9918666977876353),
    Complex32::new(0.4886212414966812, -0.8724960070729504),
    Complex32::new(0.740951125355017, -0.6715589548469545),
    Complex32::new(0.8910065241882607, -0.45399049973975725),
    Complex32::new(0.96507367231145, -0.261978638463696),
    Complex32::new(0.9930684569548887, -0.1175373974581552),
    Complex32::new(0.9995663085020189, -0.029448173248044083),
];
